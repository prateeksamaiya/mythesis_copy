import os
import copy
import sys
import os
import signal
import subprocess
import time
import random
import numpy as np

import rospy
import rospkg
from std_srvs.srv import Empty

import gym
from gym import error, spaces
from gym.utils import seeding


class RotorsEnv(gym.GoalEnv):
    # def __init__(self, model_path, initial_qpos, n_actions, n_substeps):
    def __init__(self,launchfile):
        # self.last_clock_msg = Clock()

        #Init Port
        random_number = random.randint(10000, 15000)
        self.port = str(random_number) #os.environ["ROS_PORT_SIM"]
        self.port_gazebo = str(random_number+1) #os.environ["ROS_PORT_SIM"]
        os.environ["ROS_MASTER_URI"] = "http://localhost:"+self.port
        os.environ["GAZEBO_MASTER_URI"] = "http://localhost:"+self.port_gazebo
        print("ROS_MASTER_URI=http://localhost:"+self.port + "\n")
        print("GAZEBO_MASTER_URI=http://localhost:"+self.port_gazebo + "\n")

        ros_path = os.path.dirname(subprocess.check_output(["which", "roscore"]))
        rospack = rospkg.RosPack()


        if launchfile.startswith("/"):
            fullpath = launchfile
        else:
            fullpath = os.path.join(rospack.get_path('rotors_gazebo'),"launch",launchfile)
        if not os.path.exists(fullpath):
            raise IOError("File "+fullpath+" does not exist")

        print(fullpath)

        self._roslaunch = subprocess.Popen([sys.executable, os.path.join(ros_path, b"roslaunch"), "-p", self.port, fullpath])
        print ("Gazebo launched!")

        self.gzclient_pid = 0

        # Launch the simulation with the given launchfile name
        # rospy.init_node('gym', anonymous=True)
        
        # if model_path.startswith('/'):
        #     fullpath = model_path
        # else:
        #     fullpath = os.path.join(os.path.dirname(__file__), 'assets', model_path)
        # if not os.path.exists(fullpath):
        #     raise IOError('File {} does not exist'.format(fullpath))

        # model = mujoco_py.load_model_from_path(fullpath)
        # self.sim = mujoco_py.MjSim(model, nsubsteps=n_substeps)
        # self.modder = TextureModder(self.sim)
        # self.cam_modder = CameraModder(self.sim)
        # self.light_modder = LightModder(self.sim)
        # self.viewer = None

        # self.metadata = {
        #     'render.modes': ['human', 'rgb_array'],
        #     'video.frames_per_second': int(np.round(1.0 / self.dt))
        # }

        # self.seed()
        # self._env_setup(initial_qpos=initial_qpos)
        # self.initial_state = copy.deepcopy(self.sim.get_state())

        # self.goal = self._sample_goal()
        # obs = self._get_obs()
        # self.action_space = spaces.Box(-1., 1., shape=(n_actions,), dtype='float32')
        # self.observation_space = spaces.Dict(dict(
        #     desired_goal=spaces.Box(-np.inf, np.inf, shape=obs['achieved_goal'].shape, dtype='float32'),
        #     achieved_goal=spaces.Box(-np.inf, np.inf, shape=obs['achieved_goal'].shape, dtype='float32'),
        #     observation=spaces.Box(-np.inf, np.inf, shape=obs['observation'].shape, dtype='float32'),
        # ))

        # self.episodeAcs = []
        # self.episodeObs = []
        # self.episodeInfo = []


    @property
    def dt(self):
        raise NotImplementedError()

    # Env methods
    # ----------------------------

    def seed(self, seed=None):
        self.np_random, seed = seeding.np_random(seed)
        return [seed]

    def step(self, action):
        raise NotImplementedError()

    def reset(self,goal=None):
        # Attempt to reset the simulator. Since we randomize initial conditions, it
        # is possible to get into a state with numerical issues (e.g. due to penetration or
        # Gimbel lock) or we may not achieve an initial condition (e.g. an object is within the hand).
        # In this case, we just keep randomizing until we eventually achieve a valid initial
        # configuration.
        raise NotImplementedError()

    def close(self):
        raise NotImplementedError()

    def render(self, mode='human'):
        raise NotImplementedError()

    def _get_viewer(self):

        raise NotImplementedError()

    # Extension methods
    # ----------------------------

    def _reset_sim(self):
        """Resets a simulation and indicates whether or not it was successful.
        If a reset was unsuccessful (e.g. if a randomized state caused an error in the
        simulation), this method should indicate such a failure by returning False.
        In such a case, this method will be called again to attempt a the reset again.
        """
        raise NotImplementedError()

    def _get_obs(self):
        """Returns the observation.
        """
        raise NotImplementedError()

    def _set_action(self, action):
        """Applies the given action to the simulation.
        """
        raise NotImplementedError()

    def _is_success(self, achieved_goal, desired_goal):
        """Indicates whether or not the achieved goal successfully achieved the desired goal.
        """
        raise NotImplementedError()

    def _sample_goal(self):
        """Samples a new goal and returns it.
        """
        raise NotImplementedError()

    def _env_setup(self, initial_qpos):
        """Initial configuration of the environment. Can be used to configure initial state
        and extract information from the simulation.
        """
        pass

    def _viewer_setup(self):
        """Initial configuration of the viewer. Can be used to set the camera position,
        for example.
        """
        pass

    def _render_callback(self):
        """A custom callback that is called before rendering. Can be used
        to implement custom visualizations.
        """
        pass

    def _step_callback(self):
        """A custom callback that is called after stepping the simulation. Can be used
        to enforce additional constraints on the simulation state.
        """
pass